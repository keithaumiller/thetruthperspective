<?php

/**
 * @file
 * News Extractor module - Extracts full article content using Diffbot API and generates AI summaries.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_feeds_process_alter().
 * Alter feed item data before it becomes a node.
 */
function news_extractor_feeds_process_alter(&$feed, $item, $entity_interface) {
  // Debug: Log module version on every feed import
  \Drupal::logger('news_extractor')->info('news_extractor module version: 1.0.0 - feeds_process_alter triggered');

  // Only process Article content type
  if ($entity_interface->getTarget()->bundle() !== 'article') {
    return;
  }

  $blocked_strings = [
    'comparecards.com',
    'fool.com',
    'lendingtree.com',
  ];

  $title_to_check = $item['title'] ?? '';
  $link_to_check = $item['link'] ?? '';

  // Abort if blocked strings are anywhere in the title
  foreach ($blocked_strings as $str) {
    if (stripos($title_to_check, $str) !== FALSE) {
      \Drupal::logger('news_extractor')->info('Skipping blocked string in title: @title', [
        '@title' => $title_to_check,
      ]);
      $feed->skipItem($item);
      return;
    }
  }

  // Abort if blocked strings are anywhere in the link/URL
  foreach ($blocked_strings as $str) {
    if (stripos($link_to_check, $str) !== FALSE) {
      \Drupal::logger('news_extractor')->info('Skipping blocked string in link: @url', [
        '@url' => $link_to_check,
      ]);
      $feed->skipItem($item);
      return;
    }
  }

  // Skip items with missing or empty titles
  if (empty($item['title']) || trim($item['title']) == '') {
    \Drupal::logger('news_extractor')->info('Skipping item with missing or empty title: @url', [
      '@url' => $item['link'] ?? 'No URL',
    ]);
    $feed->skipItem($item);
    return;
  }

  // Skip items with very short titles
  if (strlen(trim($item['title'])) < 10) {
    \Drupal::logger('news_extractor')->info('Skipping item with very short title: @title', [
      '@title' => $item['title'],
    ]);
    $feed->skipItem($item);
    return;
  }

  // Skip non-article URLs
  if (!empty($item['link']) && !_news_extractor_is_article_url($item['link'])) {
    \Drupal::logger('news_extractor')->info('Skipping non-article URL: @url', [
      '@url' => $item['link'],
    ]);
    $feed->skipItem($item);
    return;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 * Automatically extract full article content when a new article is created via feeds.
 */
function news_extractor_node_insert(EntityInterface $entity) {
  if ($entity->bundle() !== 'article') {
    return;
  }

  if ($entity->hasField('field_original_url') && !$entity->get('field_original_url')->isEmpty()) {
    $original_url = $entity->get('field_original_url')->uri;

    if (!_news_extractor_is_article_url($original_url)) {
      \Drupal::logger('news_extractor')->info('Deleting non-article content: @title (@url)', [
        '@title' => $entity->getTitle(),
        '@url' => $original_url,
      ]);
      $entity->delete();
      return;
    }

    $body = $entity->get('body')->value;
    if (empty($body) || strlen($body) < 500) {
      _news_extractor_extract_content($entity, $original_url);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 * Extract content when article is updated with new URL.
 */
function news_extractor_node_update(EntityInterface $entity) {
  if ($entity->bundle() !== 'article') {
    return;
  }

  if ($entity->hasField('field_original_url') && !$entity->get('field_original_url')->isEmpty()) {
    $original_url = $entity->get('field_original_url')->uri;
    $original_entity = $entity->original;

    if (!$original_entity->get('field_original_url')->isEmpty()) {
      $old_url = $original_entity->get('field_original_url')->uri;
      if ($original_url != $old_url) {
        _news_extractor_extract_content($entity, $original_url);
      }
    }
  }
}

/**
 * Check if URL is likely a news article (not podcast, video, ad, etc.).
 */
function _news_extractor_is_article_url($url) {
  $blocked_domains = [
    'comparecards.com',
    'fool.com',
    'lendingtree.com',
  ];

  foreach ($blocked_domains as $domain) {
    if (strpos($url, $domain) !== FALSE) {
      return FALSE;
    }
  }

  $skip_patterns = [
    '/audio/', '/video/', '/podcast/', '/gallery/', '/interactive/', '/live-news/', '/live-tv/',
    '/newsletters/', '/sponsored/', '/advertisement/', '/ads/', '/promo/', '/newsletter/',
    '/weather/', '/specials/', '/cnn-underscored/', '/coupons/', '/profiles/',
  ];

  foreach ($skip_patterns as $pattern) {
    if (strpos($url, $pattern) !== FALSE) {
      \Drupal::logger('news_extractor')->info('Skipping non-article URL: @url (matched pattern: @pattern)', [
        '@url' => $url,
        '@pattern' => $pattern,
      ]);
      return FALSE;
    }
  }

  $ad_keywords = ['sponsored', 'advertisement', 'promo', 'ad-', '-ad', 'coupon'];
  $url_lower = strtolower($url);

  foreach ($ad_keywords as $keyword) {
    if (strpos($url_lower, $keyword) !== FALSE) {
      \Drupal::logger('news_extractor')->info('Skipping ad-related URL: @url (matched keyword: @keyword)', [
        '@url' => $url,
        '@keyword' => $keyword,
      ]);
      return FALSE;
    }
  }

  $article_patterns = ['/politics/', '/world/', '/us/', '/national/', '/international/', '/breaking/', '/news/'];
  foreach ($article_patterns as $pattern) {
    if (strpos($url, $pattern) !== FALSE) {
      return TRUE;
    }
  }

  if (preg_match('/\/(index\.html?|story\.html?)$/i', $url) || preg_match('/\/\d{4}\/\d{2}\/\d{2}\//', $url)) {
    return TRUE;
  }

  \Drupal::logger('news_extractor')->info('Uncertain about URL, allowing: @url', [
    '@url' => $url,
  ]);
  return TRUE;
}

/**
 * Extract full article content using Diffbot API.
 */
function _news_extractor_extract_content(EntityInterface $entity, $url) {
  $api_token = '8488710a556cedc9ff2ad6547bbbecaf';
  $api_url = 'https://api.diffbot.com/v3/article';
  $request_url = $api_url . '?' . http_build_query([
    'token' => $api_token,
    'url' => $url,
    'paging' => 'false',
  ]);

  try {
    $response = \Drupal::httpClient()->get($request_url, [
      'timeout' => 30,
      'headers' => ['Accept' => 'application/json'],
    ]);
    $data = json_decode($response->getBody()->getContents(), TRUE);

    if (isset($data['objects'][0])) {
      _news_extractor_update_article($entity, $data['objects'][0]);
      \Drupal::logger('news_extractor')->info('Successfully extracted content for article: @title', [
        '@title' => $entity->getTitle(),
      ]);
    } else {
      \Drupal::logger('news_extractor')->warning('No article data returned from Diffbot for URL: @url', [
        '@url' => $url,
      ]);
    }
  } catch (\Exception $e) {
    \Drupal::logger('news_extractor')->error('Error extracting content from @url: @message', [
      '@url' => $url,
      '@message' => $e->getMessage(),
    ]);
  }
}

/**
 * Update article entity with extracted data from Diffbot.
 */
function _news_extractor_update_article(EntityInterface $entity, array $article_data) {
  $updated = FALSE;

  // Update body with full article text
  if (!empty($article_data['text'])) {
    $entity->set('body', [
      'value' => $article_data['text'],
      'format' => 'basic_html',
    ]);
    $updated = TRUE;

    // Generate AI summary
    if ($entity->hasField('field_ai_summary')) {
      $summary = _news_extractor_generate_ai_summary($article_data['text'], $entity->getTitle());
      if ($summary) {
        $entity->set('field_ai_summary', [
          'value' => $summary,
          'format' => 'basic_html',
        ]);
        $updated = TRUE;
        \Drupal::logger('news_extractor')->info('Generated AI summary for article: @title', [
          '@title' => $entity->getTitle(),
        ]);
      }
    }
  }

  // Add bias rating and credibility score
  if ($entity->hasField('field_news_source') && !$entity->get('field_news_source')->isEmpty()) {
    $news_source = $entity->get('field_news_source')->value;
    $bias_data = _news_extractor_get_source_bias($news_source);

    if ($entity->hasField('field_bias_rating')) {
      $entity->set('field_bias_rating', $bias_data['bias']);
      $updated = TRUE;
    }
    if ($entity->hasField('field_credibility_score')) {
      $entity->set('field_credibility_score', $bias_data['credibility']);
      $updated = TRUE;
    }
    \Drupal::logger('news_extractor')->info('Applied bias rating @bias (credibility: @cred) to article from @source', [
      '@bias' => $bias_data['bias'],
      '@cred' => $bias_data['credibility'],
      '@source' => $news_source,
    ]);
  }

  // Update author
  if (!empty($article_data['author']) && $entity->hasField('field_original_author')) {
    $entity->set('field_original_author', $article_data['author']);
    $updated = TRUE;
  }

  // Update publication date
  if (!empty($article_data['date']) && $entity->hasField('field_publication_date')) {
    try {
      $date = new \DateTime($article_data['date']);
      $entity->set('field_publication_date', $date->format('Y-m-d'));
      $updated = TRUE;
    } catch (\Exception $e) {
      \Drupal::logger('news_extractor')->warning('Invalid date format from Diffbot: @date', [
        '@date' => $article_data['date'],
      ]);
    }
  }

  // Add article hash for duplicate detection
  if ($entity->hasField('field_article_hash')) {
    $hash = md5($article_data['text'] ?? $entity->getTitle());
    $entity->set('field_article_hash', $hash);
    $updated = TRUE;
  }

  // Add tags
  if (!empty($article_data['tags']) && $entity->hasField('field_tags')) {
    $tag_ids = [];
    foreach ($article_data['tags'] as $tag) {
      $tag_id = _news_extractor_get_or_create_tag($tag['label']);
      if ($tag_id) {
        $tag_ids[] = $tag_id;
      }
    }
    if (!empty($tag_ids)) {
      $entity->set('field_tags', $tag_ids);
      $updated = TRUE;
    }
  }

  // Truncate field_original_url_title for DB safety
  if ($entity->hasField('field_original_url_title')) {
    $title_value = $entity->getTitle();
    $title_value = substr($title_value, 0, 255);
    $entity->set('field_original_url_title', $title_value);
  }

  if ($updated) {
    $entity->save();
  }
}

/**
 * Generate AI summary using AWS Bedrock Claude.
 */
function _news_extractor_generate_ai_summary($article_text, $article_title) {
  try {
    $sdk = new \Aws\Sdk([
      'region' => 'us-west-2',
      'version' => 'latest',
    ]);
    $bedrock = $sdk->createBedrockRuntime();

    $prompt = "Please provide a neutral, analytical summary of this news article. Include:\n\n";
    $prompt .= "1. Key points (2-3 sentences)\n";
    $prompt .= "2. Main facts and any important quotes\n";
    $prompt .= "3. Brief analysis of significance\n\n";
    $prompt .= "Keep the summary to 2-3 paragraphs total.\n\n";
    $prompt .= "Article Title: " . $article_title . "\n\n";
    $prompt .= "Article Text: " . $article_text;

    $response = $bedrock->invokeModel([
      'modelId' => 'anthropic.claude-3-5-sonnet-20240620-v1:0',
      'body' => json_encode([
        'anthropic_version' => 'bedrock-2023-05-31',
        'max_tokens' => 1000,
        'messages' => [
          [
            'role' => 'user',
            'content' => $prompt
          ]
        ]
      ])
    ]);

    $result = json_decode($response['body']->getContents(), true);

    if (isset($result['content'][0]['text'])) {
      return $result['content'][0]['text'];
    }
    return null;

  } catch (\Exception $e) {
    \Drupal::logger('news_extractor')->error('Error generating AI summary: @message', [
      '@message' => $e->getMessage(),
    ]);
    return null;
  }
}

/**
 * Get or create a taxonomy term for article tags.
 */
function _news_extractor_get_or_create_tag($tag_name) {
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $terms = $term_storage->loadByProperties([
    'name' => $tag_name,
    'vid' => 'tags',
  ]);
  if (!empty($terms)) {
    $term = reset($terms);
    return $term->id();
  }
  try {
    $term = $term_storage->create([
      'name' => $tag_name,
      'vid' => 'tags',
    ]);
    $term->save();
    return $term->id();
  } catch (\Exception $e) {
    \Drupal::logger('news_extractor')->error('Error creating tag @tag: @message', [
      '@tag' => $tag_name,
      '@message' => $e->getMessage(),
    ]);
    return NULL;
  }
}

/**
 * Implements hook_cron().
 * Process any articles that might have failed extraction during cron runs.
 */
function news_extractor_cron() {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->condition('field_original_url.uri', '', '<>')
    ->condition('body.value', '', '=')
    ->range(0, 10)
    ->accessCheck(FALSE);

  $nids = $query->execute();

  if (!empty($nids)) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $original_url = $node->get('field_original_url')->uri;
      _news_extractor_extract_content($node, $original_url);
    }
    \Drupal::logger('news_extractor')->info('Processed @count articles during cron run', [
      '@count' => count($nids),
    ]);
  }
}

/**
 * Get bias rating and credibility score for a news source.
 */
function _news_extractor_get_source_bias($source) {
  $source_ratings = [
    'CNN Politics' => ['bias' => 'lean_left', 'credibility' => 75],
    'CNN' => ['bias' => 'lean_left', 'credibility' => 75],
    'CNN.com - RSS Channel - Politics' => ['bias' => 'lean_left', 'credibility' => 75],
    'NPR' => ['bias' => 'lean_left', 'credibility' => 85],
    'Reuters' => ['bias' => 'center', 'credibility' => 90],
    'Associated Press' => ['bias' => 'center', 'credibility' => 88],
    'BBC News' => ['bias' => 'center', 'credibility' => 82],
    'Wall Street Journal' => ['bias' => 'lean_right', 'credibility' => 80],
    'Fox News' => ['bias' => 'right', 'credibility' => 65],
    'MSNBC' => ['bias' => 'left', 'credibility' => 70],
    'New York Times' => ['bias' => 'lean_left', 'credibility' => 78],
    'Washington Post' => ['bias' => 'lean_left', 'credibility' => 77],
    'Politico' => ['bias' => 'lean_left', 'credibility' => 72],
    'The Hill' => ['bias' => 'center', 'credibility' => 70],
  ];
  $default = ['bias' => 'center', 'credibility' => 50];
  return $source_ratings[$source] ?? $default;
}
